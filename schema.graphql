schema {
	query: Query
	mutation: Mutation
}

type Query {
	# Pings the backend; pong!
	ping: String!

  # Queries the current user (based on authorization bearer).
  me: User!

  # Queries a note.
  user(userID: ID!): User!

  # Queries a note.
  note(noteID: ID!): Note!
}

type Mutation {
	# Registers a new user.
	registerUser(userInput: RegisterUserInput!): Boolean

  # Creates a new note.
  createNote(noteInput: NoteInput!): Boolean
  # Updates a note.
  updateNote(noteInput: NoteInput!): Boolean
  # Deletes a note.
  deleteNote(noteID: ID!): Boolean
}

type User {
  userID:        ID!
  createdAt:     String!
  updatedAt:     String!
  email:         String!
  emailVerified: Boolean!
  authProvider:  String!
  photoURL:      String # TODO: Nullable?
  displayName:   String # TODO: Nullable?
  username:      String # TODO: Nullable?

  # Connections:
  notes(limit: Int, offset: Int, direction: String): [Note!]!
}

type Note {
  userID:        ID!
  noteID:        ID!
  createdAt:     String!
  updatedAt:     String!
  data:          String!

  # Connections:
  user: User!
}

# Used for registering a new user.
input RegisterUserInput {
  userID:        ID!
  email:         String!
  emailVerified: Boolean!
  authProvider:  String!
  photoURL:      String # TODO: Nullable?
  displayName:   String # TODO: Nullable?
}

# Used for creating a new note and updating a note.
input NoteInput {
  noteID:        ID!
  data:          String!
}
