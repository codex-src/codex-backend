schema {
	query: Query
	mutation: Mutation
}

type Query {
	# Pings the backend; pong!
	ping: String!
  # Queries the current user (based on authorization bearer).
  me: User!
  # Queries a note.
  note(noteID: ID!): Note!
}

type Mutation {
	# Registers a new user.
	registerUser(userInput: RegisterUserInput!): User!

  # Creates a new note.
  createNote(noteInput: NoteInput!): Boolean
  # Updates a note.
  updateNote(noteInput: NoteInput!): Boolean
  # Deletes a note.
  deleteNote(noteID: ID!): Boolean
}

input RegisterUserInput {
  userID:        ID!
  email:         String!
  emailVerified: Boolean!
  authProvider:  String!
  photoURL:      String # TODO: Nullable?
  displayName:   String # TODO: Nullable?
}

type User {
  userID:        ID!
  createdAt:     String!
  updatedAt:     String!
  email:         String!
  emailVerified: Boolean!
  authProvider:  String!
  photoURL:      String # TODO: Nullable?
  displayName:   String # TODO: Nullable?
  username:      String # TODO: Nullable?

  notes(limit: Int, offset: Int, direction: String): [Note!]!
}

input NoteInput {
  noteID:        ID!
  data:          String!
}

type Note {
  userID:        ID!
  noteID:        ID!
  createdAt:     String!
  updatedAt:     String!
  data:          String!
}
