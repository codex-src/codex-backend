schema {
	query: Query
	mutation: Mutation
}

type Query {
	# Pings the backend; pong!
	ping: String!
  # Queries the current user (based on authorization bearer).
  me: User!
}

type Mutation {
	# Registers a new user.
	registerUser(user: RegisterUserInput!): User!
}

input RegisterUserInput {
  userID:        ID!
  email:         String!
  emailVerified: Boolean!
  authProvider:  String!
  photoURL:      String # TODO: Nullable?
  displayName:   String # TODO: Nullable?
}

type User {
  userID:        ID!
  createdAt:     String!
  updatedAt:     String!
  email:         String!
  emailVerified: Boolean!
  authProvider:  String!
  photoURL:      String # TODO: Nullable?
  displayName:   String # TODO: Nullable?
  username:      String # TODO: Nullable?

  notes(limit: Int, offset: Int): [Note!]!
}

# input NoteInput {
#   # TODO
# }

type Note {
  userID:        ID!
  noteID:        ID!
  createdAt:     String!
  updatedAt:     String!
  data:          String!
  # dataShort:     String!
  # dataMedium:    String!
  # dataLong:      String!
}
